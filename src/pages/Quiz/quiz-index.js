// ===================================================================================
// ARQUIVO: Quiz.js
//
// PROP√ìSITO GERAL:
// Este arquivo √© o "c√©rebro" e o "esqueleto" da p√°gina do Quiz.
// Ele √© respons√°vel por tudo: carregar as perguntas, organizar as unidades,
// controlar o jogo (qual pergunta est√° na tela, pontua√ß√£o), salvar o progresso
// do jogador e, finalmente, desenhar todos os bot√µes e textos na tela.
// ===================================================================================

// --- PASSO 1: Reunindo as Ferramentas e Materiais ---
// Antes de construir qualquer coisa, importamos as "ferramentas" necess√°rias.
// Pense nisso como pegar as plantas do projeto e os materiais de constru√ß√£o.
import React, { useState, useMemo, useEffect } from "react"; // Ferramentas do React, o "construtor" da p√°gina.
import { Link } from "react-router-dom"; // Ferramenta para criar links de navega√ß√£o.
import Theme from "../../components/Tema/tema"; // Componente para trocar o tema (claro/escuro).
import questionsData from "../../components/Const/questions"; // A "lista mestra" com todas as perguntas do quiz.
import "../Quiz/quiz-index.css"; // O "manual de estilo" que define as cores e o layout.
import { screen } from '@testing-library/react'; // Ferramenta para testes (geralmente n√£o impacta a produ√ß√£o).


// --- PASSO 2: Organizando o Conte√∫do do Quiz ---
// Aqui, pegamos a lista mestra de perguntas e a organizamos em "cap√≠tulos".
// Cada cap√≠tulo √© uma "Unidade" do nosso quiz.
const allUnits = {};
// Criamos um la√ßo para montar 17 unidades, cada uma com suas 10 primeiras perguntas.
for (let i = 1; i <= 17; i++) {
  allUnits[`Unidade ${i}`] = questionsData.filter((q) => q.unit === i).slice(0, 10);
}

// Criamos uma "etiqueta" para a caixa onde vamos guardar o progresso do jogador.
// Isso garante que a gente sempre salve e carregue os dados do lugar certo no navegador.
const QUIZ_PROGRESS_LOCALSTORAGE_KEY = "meuQuizProgressoUnidades";


// --- PASSO 3: Construindo o Componente Principal do Quiz ---
// Agora come√ßa a constru√ß√£o da p√°gina em si. Tudo que est√° dentro de "Quiz"
// controla o que o usu√°rio v√™ e com o que ele interage.
const Quiz = () => {
  // Para sermos eficientes, "memorizamos" as unidades que organizamos antes.
  // √â como deixar os cap√≠tulos do livro j√° separados na mesa para n√£o ter que
  // reorganizar tudo a cada pequena a√ß√£o do usu√°rio.
  const units = useMemo(() => allUnits, []);

  // Esta √© uma fun√ß√£o "planta baixa" para criar um progresso zerado para um novo jogador.
  // Ela define que a pontua√ß√£o de todas as unidades √© 0 e apenas a "Unidade 1"
  // come√ßa desbloqueada.
  const getDefaultInitialProgress = () => {
    const initial = {};
    const currentUnitKeys = Object.keys(allUnits);
    
    currentUnitKeys.forEach((unitName, index) => {
      initial[unitName] = {
        score: 0,
        completed: false,
        unlocked: index === 0, // A m√°gica acontece aqui: s√≥ o primeiro √© "true".
        attempted: false,
      };
    });
    return initial;
  };

  // --- PASSO 4: Gerenciando o Progresso do Jogador (O "Save Game") ---
  // Este √© o "painel de controle" do progresso. √â a parte mais inteligente do c√≥digo.
  // Ao carregar a p√°gina, ele tenta fazer o seguinte:
  const [unitProgress, setUnitProgress] = useState(() => {
    // 1. Prepara um progresso zerado, como garantia.
    const defaultProgress = getDefaultInitialProgress();

    try {
      // 2. Tenta encontrar um progresso salvo no "dep√≥sito" do navegador (localStorage).
      const savedProgressString = localStorage.getItem(QUIZ_PROGRESS_LOCALSTORAGE_KEY);
      
      // 3. Se encontrou um progresso salvo...
      if (savedProgressString) {
        const loadedSavedProgress = JSON.parse(savedProgressString);
        const combinedProgress = {};
        let atLeastOneUnitIsCurrentlyUnlocked = false;
        const currentUnitKeysFromCode = Object.keys(allUnits);

        // ...ele verifica o progresso salvo, unidade por unidade, e o compara com o
        // estado atual do c√≥digo. Isso evita que o jogo quebre se, por exemplo,
        // adicionarmos novas unidades no futuro. √â uma verifica√ß√£o de seguran√ßa.
        currentUnitKeysFromCode.forEach((unitName) => {
          const defaultUnitDataForThisUnit = defaultProgress[unitName] || { score: 0, completed: false, unlocked: false, attempted: false };
          const savedUnitData = loadedSavedProgress[unitName];

          // Ele mescla os dados salvos com os padr√µes para garantir que nada falte.
          if (savedUnitData) {
            combinedProgress[unitName] = {
              score: typeof savedUnitData.score === 'number' ? savedUnitData.score : defaultUnitDataForThisUnit.score,
              completed: typeof savedUnitData.completed === 'boolean' ? savedUnitData.completed : defaultUnitDataForThisUnit.completed,
              unlocked: typeof savedUnitData.unlocked === 'boolean' ? savedUnitData.unlocked : defaultUnitDataForThisUnit.unlocked,
              attempted: typeof savedUnitData.attempted === 'boolean' ? savedUnitData.attempted : defaultUnitDataForThisUnit.attempted,
            };
          } else {
            combinedProgress[unitName] = defaultUnitDataForThisUnit;
          }

          if (combinedProgress[unitName]?.unlocked) {
            atLeastOneUnitIsCurrentlyUnlocked = true;
          }
        });

        // 4. Como uma camada extra de seguran√ßa, se por algum motivo nenhum progresso salvo
        // tiver uma unidade desbloqueada, ele desbloqueia a primeira para garantir que o jogador n√£o fique travado.
        if (!atLeastOneUnitIsCurrentlyUnlocked && currentUnitKeysFromCode.length > 0) {
          const firstUnitNameInCode = currentUnitKeysFromCode[0];
          if (combinedProgress[firstUnitNameInCode]) {
            combinedProgress[firstUnitNameInCode].unlocked = true;
          }
        }
        return combinedProgress;
      
      // 5. Se n√£o encontrou nenhum progresso salvo, simplesmente usa o progresso zerado.
      } else {
        return defaultProgress;
      }
    // 6. Se der qualquer erro ao tentar ler os dados, ele usa o progresso zerado para n√£o travar.
    } catch (error) {
      console.error("Falha ao carregar/processar o progresso do localStorage:", error);
      return defaultProgress;
    }
  });

  // --- PASSO 5: A Fun√ß√£o de "Salvamento Autom√°tico" ---
  // Este bloco de c√≥digo funciona como um "vigia". Ele fica observando o painel de progresso (`unitProgress`).
  // Toda vez que o progresso do jogador muda (uma nova pontua√ß√£o, uma unidade desbloqueada),
  // ele automaticamente salva a vers√£o mais recente no "dep√≥sito" do navegador.
  useEffect(() => {
    try {
      if (Object.keys(unitProgress).length > 0) {
        localStorage.setItem(QUIZ_PROGRESS_LOCALSTORAGE_KEY, JSON.stringify(unitProgress));
      } else if (localStorage.getItem(QUIZ_PROGRESS_LOCALSTORAGE_KEY)) {
        localStorage.removeItem(QUIZ_PROGRESS_LOCALSTORAGE_KEY);
      }
    } catch (error) {
      console.error("Falha ao salvar o progresso no localStorage:", error);
    }
  }, [unitProgress]); // A "m√°gica" est√° aqui: ele s√≥ executa quando `unitProgress` muda.


  // --- PASSO 6: Controles para o Quiz em Andamento ---
  // Estes s√£o os "controles de m√£o" que gerenciam um quiz enquanto ele est√° acontecendo.
  const [selectedUnit, setSelectedUnit] = useState(null); // Guarda qual unidade o jogador escolheu.
  const [current, setCurrent] = useState(0); // Qual a pergunta atual (a primeira, segunda, etc.).
  const [selected, setSelected] = useState(null); // Qual op√ß√£o o jogador acabou de clicar.
  const [score, setScore] = useState(0); // A pontua√ß√£o da tentativa ATUAL.
  const [finished, setFinished] = useState(false); // Se o quiz da unidade terminou ou n√£o.
  const [answeredQuestions, setAnsweredQuestions] = useState([]); // Lista de perguntas j√° respondidas.

  // Pega as perguntas certas da unidade que o jogador selecionou.
  const questions = selectedUnit ? units[selectedUnit] || [] : [];

  // --- PASSO 7: A√ß√µes do Jogador ---
  // A fun√ß√£o que √© executada quando o jogador clica para come√ßar uma unidade.
  const handleUnitSelect = (unitName) => {
    // Primeiro, uma verifica√ß√£o de seguran√ßa: a unidade est√° desbloqueada?
    if (!unitProgress[unitName]?.unlocked) {
      alert("üîí Esta unidade est√° bloqueada. Complete a unidade anterior com pelo menos 70% de acerto para desbloque√°-la.");
      return; // Se estiver bloqueada, a fun√ß√£o para aqui.
    }
    // Segunda verifica√ß√£o: esta unidade tem perguntas?
    if (!units[unitName] || units[unitName].length === 0) {
        alert("üìù Esta unidade n√£o possui perguntas no momento.");
        return;
    }

    // Se tudo estiver certo, preparamos o "tabuleiro" para um novo jogo.
    setSelectedUnit(unitName); // Marca qual unidade estamos jogando.
    setCurrent(0); // Volta para a primeira pergunta.
    setSelected(null); // Limpa a resposta selecionada anteriormente.
    setScore(0); // Zera a pontua√ß√£o da tentativa.
    setFinished(false); // Marca que o jogo est√° em andamento.
    setAnsweredQuestions([]); // Limpa o hist√≥rico de perguntas respondidas.
  };

  // A fun√ß√£o que √© executada quando o jogador clica em uma das op√ß√µes de resposta.
  const handleAnswer = (option) => {
    // Marca a op√ß√£o que o jogador escolheu.
    setSelected(option);
    let currentAttemptScore = score;
    // Verifica se a resposta est√° correta.
    if (option === questions[current].answer) {
      // Se estiver correta, aumenta a pontua√ß√£o da tentativa atual.
      currentAttemptScore++;
      setScore(s => s + 1);
    }

    if (!answeredQuestions.includes(current)) {
      setAnsweredQuestions([...answeredQuestions, current]);
    }

    // Espera 1 segundo para o jogador ver se acertou ou errou (efeito visual).
    setTimeout(() => {
      // Depois da pausa, verifica se ainda h√° perguntas na unidade.
      if (current + 1 < questions.length) {
        // Se houver, avan√ßa para a pr√≥xima pergunta.
        setCurrent(current + 1);
        setSelected(null); // Limpa a sele√ß√£o para a nova pergunta.
      } else {
        // Se n√£o houver mais perguntas, o quiz da unidade terminou.
        setFinished(true);
        const finalUnitScore = currentAttemptScore;
        const numQuestions = questions.length;
        const percentage = numQuestions > 0 ? (finalUnitScore / numQuestions) * 100 : 0;
        const unitName = selectedUnit;

        // --- A Grande Atualiza√ß√£o ---
        // Agora, atualizamos o "painel de controle" geral com o resultado do quiz.
        setUnitProgress(prevProgress => {
          const newProgressDataForUnit = {
            ...prevProgress[unitName],
            score: finalUnitScore, // Atualiza a pontua√ß√£o.
            completed: true, // Marca a unidade como "conclu√≠da".
            attempted: true,
          };

          const updatedOverallProgress = {
            ...prevProgress,
            [unitName]: newProgressDataForUnit,
          };

          // --- A Regra de Desbloqueio ---
          // Se o jogador acertou 70% ou mais...
          if (percentage >= 70 && numQuestions > 0) {
            const unitKeys = Object.keys(units);
            const currentUnitIndex = unitKeys.indexOf(unitName);
            // ...e n√£o for a √∫ltima unidade...
            if (currentUnitIndex < unitKeys.length - 1) {
              // ...desbloqueamos a pr√≥xima unidade da lista!
              const nextUnitName = unitKeys[currentUnitIndex + 1];
              updatedOverallProgress[nextUnitName] = {
                ...prevProgress[nextUnitName],
                unlocked: true,
              };
            }
          }
          // Retorna o novo estado de progresso, que ser√° salvo automaticamente.
          return updatedOverallProgress;
        });
      }
    }, 1000); // 1000 milissegundos = 1 segundo de pausa.
  };

  // Fun√ß√µes de "conveni√™ncia" para os bot√µes da tela de resultado.
  // Permite ao jogador voltar para a tela de sele√ß√£o de unidades.
  const restartQuizAndGoToSelection = () => {
    setSelectedUnit(null);
  };

  // Permite ao jogador tentar a mesma unidade novamente.
  const tryAgainCurrentUnit = () => {
    if (selectedUnit) {
      handleUnitSelect(selectedUnit);
    }
  };

  // Permite ao jogador avan√ßar para a pr√≥xima unidade (se estiver desbloqueada).
  const advanceToNextUnit = () => {
    const unitKeys = Object.keys(units);
    const currentUnitIndex = unitKeys.indexOf(selectedUnit);
    if (currentUnitIndex < unitKeys.length - 1) {
      const nextUnitName = unitKeys[currentUnitIndex + 1];
      if (unitProgress[nextUnitName]?.unlocked) {
        handleUnitSelect(nextUnitName);
      } else {
        alert("Erro: A pr√≥xima unidade n√£o est√° desbloqueada.");
        setSelectedUnit(null);
      }
    }
  };

  // L√≥gica auxiliar para saber qual √© a pr√≥xima unidade.
  const currentUnitIndexGlobal = selectedUnit ? Object.keys(units).indexOf(selectedUnit) : -1;
  const nextUnitNameGlobal = currentUnitIndexGlobal !== -1 && currentUnitIndexGlobal < Object.keys(units).length - 1
    ? Object.keys(units)[currentUnitIndexGlobal + 1]
    : null;


  // --- PASSO 8: Desenhando a P√°gina na Tela (A "Planta Baixa") ---
  // Tudo dentro do `return` √© o que ser√° efetivamente desenhado na tela.
  // √â como a planta de um arquiteto, dizendo onde cada parede, porta e janela vai ficar.
  return (
    <div className="home-content-box">
      {/* O cabe√ßalho da p√°gina com os links de navega√ß√£o. */}
      <div className="header-background">
              <header className="custom-header">
                <div className="dot_home">
                  <Link to="/" className="bar-link-home" />
                </div>
                <div className="dot" />
                <div className="dot" />
                <Link to="/glossario" className="bar-link">Gloss√°rio</Link>
                <div className="dot" />
                <div className="dot" />
                <div className="dot" />
                <Link to="/calculo" className="bar-link">Calculadora</Link>
                <div className="dot" />
                <div className="dot" />
                <Link to="/formulario" className="bar-link">Formul√°rio</Link>
                <div className="dot" />
                <div className="dot" />
                <div className="dot" />
                <Link to="/quiz" className="bar-link">Quiz</Link>
                <div className="dot" />
                <div className="dot" />
                <div className="dot-about">
                  <Link to="/sobre" className="bar-link-about" />
                </div>
              </header>
            </div>
      
            <Theme />

      {/* O container principal que segura a barra lateral e a √°rea do quiz. */}
      <div className="quiz-wrapper">
        {/* A barra lateral esquerda que lista todas as unidades. */}
        <aside className="quiz-sidebar">
          <h3>Unidades</h3>
          <ul className="unit-list-vertical">
            {/* Aqui, o c√≥digo cria um bot√£o para cada unidade existente. */}
            {Object.keys(units).map((unitName) => {
              // Para cada unidade, ele verifica o progresso do jogador.
              const progress = unitProgress[unitName] || { 
                score: 0, 
                completed: false, 
                unlocked: (Object.keys(units).indexOf(unitName) === 0), 
                attempted: false 
              };
              const unitData = units[unitName] || [];
              let statusIndicator = "";
              let itemClassName = "";

              // E, com base no progresso, decide qual √≠cone e cor usar.
              // Se n√£o estiver desbloqueada, mostra um cadeado üîí.
              if (!progress?.unlocked) {
                statusIndicator = " üîí";
                itemClassName = "locked";
              // Se j√° foi conclu√≠da...
              } else if (progress?.completed) {
                itemClassName = "completed";
                // ...e a nota for boa, mostra um check ‚úÖ.
                if (unitData.length > 0 && (progress.score / unitData.length) * 100 >= 70) {
                  statusIndicator = " ‚úÖ";
                  itemClassName += " passed";
                // ...e a nota for ruim, mostra um X ‚ùå.
                } else if (unitData.length > 0) {
                  statusIndicator = " ‚ùå";
                  itemClassName += " failed";
                } else {
                    statusIndicator = " N/A";
                    itemClassName += " empty";
                }
              // Se estiver desbloqueada mas n√£o conclu√≠da, mostra uma seta ‚û°Ô∏è.
              } else {
                statusIndicator = " ‚û°Ô∏è";
                itemClassName = "unlocked";
              }

              return (
                <li key={unitName}>
                  <button
                    className={`unit-tab ${selectedUnit === unitName ? "active" : ""} ${itemClassName}`}
                    onClick={() => handleUnitSelect(unitName)}
                    // O bot√£o fica desabilitado se a unidade estiver bloqueada ou vazia.
                    disabled={!progress?.unlocked || (units[unitName] && units[unitName].length === 0)}
                  >
                    {unitName}
                    {statusIndicator}
                    {units[unitName] && units[unitName].length === 0 && progress?.unlocked && " (Vazia)"}
                  </button>
                </li>
              );
            })}
          </ul>
        </aside>

        {/* A √°rea principal √† direita, onde o quiz acontece. */}
        <main className="quiz-main">
          {/* O que mostrar aqui depende do estado do jogo. */}
          {!selectedUnit ? (
            // Se nenhuma unidade foi selecionada, mostra uma tela de boas-vindas.
            <div className="unit-placeholder">
              <p>üëã Bem-vindo ao Quiz! Selecione uma unidade ao lado para come√ßar.</p>
              <p><small>Seu progresso ser√° salvo automaticamente.</small></p>
            </div>
          ) : finished ? (
            // Se o quiz da unidade terminou, mostra a tela de resultado.
            <div className="result">
              <h2>Resultado da {selectedUnit}</h2>
              <p>
                Voc√™ acertou {score} de {questions.length} perguntas (
                {questions.length > 0 ? ((score / questions.length) * 100).toFixed(0) : 0}%)
              </p>
              {/* Mensagens de incentivo com base na pontua√ß√£o. */}
              {questions.length > 0 && (score / questions.length) * 100 >= 70 ? (
                <>
                  <p><strong>üéâ Parab√©ns! Voc√™ passou nesta unidade.</strong></p>
                  {/* Mostra o bot√£o para avan√ßar apenas se a pr√≥xima unidade estiver desbloqueada. */}
                  {nextUnitNameGlobal && unitProgress[nextUnitNameGlobal]?.unlocked ? (
                    <button onClick={advanceToNextUnit} className="next-unit-button">
                      Ir para {nextUnitNameGlobal} ‚û°Ô∏è
                    </button>
                  ) : (
                      Object.keys(units).indexOf(selectedUnit) === Object.keys(units).length - 1 && <p>üèÜ Voc√™ completou todas as unidades!</p>
                  )}
                </>
              ) : questions.length > 0 ? (
                <p>Voc√™ precisa acertar pelo menos 70% para desbloquear a pr√≥xima unidade. N√£o desanime! üí™</p>
              ) : (
                <p>Esta unidade n√£o continha perguntas para avalia√ß√£o.</p>
              )}
              {/* Bot√µes para tentar novamente ou escolher outra unidade. */}
              {questions.length > 0 && <button onClick={tryAgainCurrentUnit}>Tentar Novamente {selectedUnit} üîÅ</button>}
              <button onClick={restartQuizAndGoToSelection}>Escolher outra unidade üìö</button>
            </div>
          ) : questions.length > 0 ? (
            // Se um quiz est√° em andamento, mostra a caixa com a pergunta e as op√ß√µes.
            <div className="question-box">
              <h2>{questions[current]?.question}</h2>
              <div className="options">
                {/* Cria um bot√£o para cada op√ß√£o de resposta. */}
                {questions[current].options.map((option) => (
                  <button
                    key={option}
                    // A cor do bot√£o muda para verde ou vermelho ap√≥s a resposta.
                    className={`option-button ${
                      selected
                        ? option === questions[current].answer
                          ? "correct"
                          : option === selected
                          ? "incorrect"
                          : ""
                        : ""
                    }`}
                    onClick={() => handleAnswer(option)}
                    // Desabilita os bot√µes ap√≥s uma resposta ser escolhida.
                    disabled={!!selected}
                  >
                    {option}
                  </button>
                ))}
              </div>
              {/* As bolinhas que mostram o progresso dentro da unidade. */}
              <div className="quiz-progress">
                {[...Array(questions.length)].map((_, index) => (
                  <div
                    key={index}
                    className={`progress-dot ${
                      answeredQuestions.includes(index) ? "answered" : ""
                    } ${index === current ? "current" : ""}`}
                  ></div>
                ))}
              </div>
            </div>
          ) : (
              // Se a unidade selecionada n√£o tem perguntas, mostra uma mensagem de aviso.
              <div className="unit-placeholder">
                <p>üòï Parece que n√£o h√° perguntas para a {selectedUnit}. Por favor, selecione outra unidade.</p>
                <button onClick={restartQuizAndGoToSelection}>Voltar para sele√ß√£o</button>
              </div>
          )}
        </main>
      </div>
    </div>
  );
};

// Finalmente, "exportamos" nosso componente Quiz para que outras partes do site possam us√°-lo.
export default Quiz;